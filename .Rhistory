if(!require(devtools)) install.packages('devtools')
devtools::install_github("tpoisot/digitize")
install.packages(c('devtools','curl'))
install.packages('curl')
devtools::install_github("tpoisot/digitize")
install.packages("kable")
edu <- data.frame(Date = c("2016", "2011", "2009"),
Degree = c("PhD", "MRes", "BSc"),
Topic = c("Ecology & conservation biology", "Biodiversity & conservation", "Zoology with conservation"),
Institution = c("Queen's University Belfast", "University of Leeds", "Bangor University"))
install.packages("pander")
install.packages("kableExtra")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ggplot2)
library(Rmisc)
library(lme4)
library(lsmeans)
library(scales)
library(broom)
library(plyr)
library(dplyr)
library(MuMIn)
# Read data for Gough species and analogues
anDat <- read.csv("gough_analogue.csv", header = TRUE)
# Filter new df for Gough species only
gDat <- anDat %>% filter(l2 == "GI")
b <- data.frame(species = unique(gDat$species),
abb = c("ATPE", "AYNA", "BRBP", "GRPE", "GRSH", "MGPE", "SGPE", "SOAL", "SOPE", "TRAL"))
gDat <- merge(gDat, b, by = "species")
# Summarise breeding success, maintaining associated data
gsum <- summarySE(gDat, measurevar="bs", groupvars=c("species", "abb", "weight", "season", "nest"))
ansum <- summarySE(anDat, measurevar="bs", groupvars=c("species", "l2"))
gsum["ymin"] <- gsum$bs-gsum$se
gsum["ymax"] <- gsum$bs+gsum$se
gsum$ymin[3] <- 0 # Replace values <0 with 0
gsum$ymin[6] <- 0 # Replace values <0 with 0
gsum$species <- factor(gsum$species, levels = gsum$species[order(gsum$weight)]) # sort by weight
a <- gDat %>%
filter(nest == "b") # Below-ground nesters; repeat for above-ground and each season
quantiles <- quantile(a$bs, probs = c(.25, .75))
range <- 1.5 * IQR(a$bs)
range
norm <- subset(a, a$bs > (quantiles[1] - range)
& a$bs < (quantiles[2] + range))
# Rescale weights to facilitate model convergence
linMap <- function(x, from, to){
(x - min(x)) / max(x - min(x)) * (to - from) + from}
gDat$wscale <- linMap(gDat$weight, 0, 1)
# transform breeding success so that model residuals are normal and variances are equal
gDat$bs2 <- sqrt(gDat$bs)
df <- data.frame(species = unique(gDat$species), s2 = 1:10)
gDat <- merge(gDat, df, by = "species")
wr.fit1 <- glmer(bs2 ~ (1|y2) + (1|s2), family = binomial, data = gDat, na.action = "na.fail")
wr.fit2 <- glmer(bs2 ~ s2 + (1|y2) + (1|s2), family = binomial, data = gDat, na.action = "na.fail")
wr.fit3 <- glmer(bs2 ~ nest +  (1|y2) + (1|s2), family = binomial, data = gDat, na.action = "na.fail")
wr.fit4 <- glmer(bs2 ~ season + (1|y2) + (1|s2), family = binomial, data = gDat, na.action = "na.fail")
wr.fit5 <- glmer(bs2 ~ wscale + (1|y2) + (1|s2), family = binomial, data = gDat, na.action = "na.fail")
wr.fit6 <- glmer(bs2 ~ s2 + nest + (1|y2) + (1|s2), family = binomial, data = gDat, na.action = "na.fail")
wr.fit7 <- glmer(bs2 ~ s2 + season + (1|y2) + (1|s2), family = binomial, data = gDat, na.action = "na.fail")
wr.fit8 <- glmer(bs2 ~ s2 + wscale + (1|y2) + (1|s2), family = binomial, data = gDat, na.action = "na.fail")
wr.fit9 <- glmer(bs2 ~ nest + season + (1|y2) + (1|s2), family = binomial, data = gDat, na.action = "na.fail")
wr.fit10 <- glmer(bs2 ~ nest + wscale + (1|y2) + (1|s2), family = binomial, data = gDat, na.action = "na.fail")
wr.fit11 <- glmer(bs2 ~ season + wscale + (1|y2) + (1|s2), family = binomial, data = gDat, na.action = "na.fail")
wr.fit12 <- glmer(bs2 ~ s2 + nest + season + (1|y2) + (1|s2), family = binomial, data = gDat, na.action = "na.fail")
wr.fit13 <- glmer(bs2 ~ s2 + nest + wscale + (1|y2) + (1|s2), family = binomial, data = gDat, na.action = "na.fail")
wr.fit14 <- glmer(bs2 ~ s2 + season + wscale + (1|y2) + (1|s2), family = binomial, data = gDat, na.action = "na.fail")
wr.fit15 <- glmer(bs2 ~ nest + season + wscale + (1|y2) + (1|s2), family = binomial, data = gDat, na.action = "na.fail")
wr.fit16 <- glmer(bs2 ~ s2 + nest + season + wscale + (1|y2) + (s2), family = binomial, data = gDat, na.action = "na.fail")
anova(wr.fit5, wr.fit8)
histogram(residuals(wr.fit10))
qqnorm(residuals(wr.fit10))
# Use broom to extract model components and save into data frame objects
# Extract variable stats using tidy, e.g.:
# wr.fit5 %>% tidy
# And/or model data using:
# wr.fit5 %>% augment() %>% head(3)
# Include likelihood ratio tests (lr)
# Model names
modcomp <- data.frame(mod = sprintf("wr.fit%d",seq(1:16)),
rbind(glance(wr.fit1),glance(wr.fit2),glance(wr.fit3),
glance(wr.fit4),glance(wr.fit5),glance(wr.fit6),
glance(wr.fit7),glance(wr.fit8),glance(wr.fit9),
glance(wr.fit10),glance(wr.fit11),glance(wr.fit12),
glance(wr.fit13),glance(wr.fit14),glance(wr.fit15),
glance(wr.fit16)),
lr = c((AIC(wr.fit1)-AIC(wr.fit1))*log2(exp(1)),
(AIC(wr.fit1)-AIC(wr.fit2))*log2(exp(1)),
(AIC(wr.fit1)-AIC(wr.fit3))*log2(exp(1)),
(AIC(wr.fit1)-AIC(wr.fit4))*log2(exp(1)),
(AIC(wr.fit1)-AIC(wr.fit5))*log2(exp(1)),
(AIC(wr.fit1)-AIC(wr.fit6))*log2(exp(1)),
(AIC(wr.fit1)-AIC(wr.fit7))*log2(exp(1)),
(AIC(wr.fit1)-AIC(wr.fit8))*log2(exp(1)),
(AIC(wr.fit1)-AIC(wr.fit9))*log2(exp(1)),
(AIC(wr.fit1)-AIC(wr.fit10))*log2(exp(1)),
(AIC(wr.fit1)-AIC(wr.fit11))*log2(exp(1)),
(AIC(wr.fit1)-AIC(wr.fit12))*log2(exp(1)),
(AIC(wr.fit1)-AIC(wr.fit13))*log2(exp(1)),
(AIC(wr.fit1)-AIC(wr.fit14))*log2(exp(1)),
(AIC(wr.fit1)-AIC(wr.fit15))*log2(exp(1)),
(AIC(wr.fit1)-AIC(wr.fit16))*log2(exp(1))),
call = c(paste(tidy(wr.fit1)[,1], collapse=" "),
paste(tidy(wr.fit2)[,1], collapse=" "),
paste(tidy(wr.fit3)[,1], collapse=" "),
paste(tidy(wr.fit4)[,1], collapse=" "),
paste(tidy(wr.fit5)[,1], collapse=" "),
paste(tidy(wr.fit6)[,1], collapse=" "),
paste(tidy(wr.fit7)[,1], collapse=" "),
paste(tidy(wr.fit8)[,1], collapse=" "),
paste(tidy(wr.fit9)[,1], collapse=" "),
paste(tidy(wr.fit10)[,1], collapse=" "),
paste(tidy(wr.fit11)[,1], collapse=" "),
paste(tidy(wr.fit12)[,1], collapse=" "),
paste(tidy(wr.fit13)[,1], collapse=" "),
paste(tidy(wr.fit14)[,1], collapse=" "),
paste(tidy(wr.fit15)[,1], collapse=" "),
paste(tidy(wr.fit16)[,1], collapse=" ")
))
# Tidy column for variables
y <- as.character(modcomp$call)
y <- y %>% gsub("\\s*\\([^\\)]+\\)","",.) %>% gsub("sd_.y2", "",.) %>% gsub("sd_.s2", "",.) %>%
gsub("seasonw", "b", .) %>% gsub("s2", "s", .) %>% gsub("nestb", "n", .) %>%
gsub("wscale", "w", .)
modcomp$call <- y
modcomp$dAIC <- modcomp$AIC - min(modcomp$AIC)
# Compare models
modcomp
# Dredge all data
wr.aic <- dredge(wr.fit16, rank = "AIC")
var.imp <- importance(wr.aic) # Variable  -importance weights
top.set <- subset(wr.aic, delta <2) # Top set of models (<2 delta AIC)
top.mod <- subset(wr.aic, delta == 0) # Best apporoximatng model
# Average model
wr.avg <- model.avg(top.set)
summary(wr.avg)
